# Generated by Django 3.0.5 on 2020-04-25 19:14

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc

import csv
import linecache
import os.path
import distutils


from game.views import MODE_THRESHOLD, QUESTION_PER_TEST


def load_game(apps, schema_editor):

    Sentence = apps.get_model("game", "Sentence")

    #path_to_data = "/home/tony/Desktop/491/kanarya/game_project/game/static/game/sentences.csv"
    path_to_data = os.path.dirname(__file__) + '/../static/game/sentences.csv'

    f = open(path_to_data, 'r')

    sentence_idx = 0

    for idx, line in enumerate(f):

        #index = list(csv.reader([line]))[0][0]
        text = list(csv.reader([line]))[0][1]
        pos = int(list(csv.reader([line]))[0][2])   
        
        # A temporary workaround to solve the alignment of long sentences
        if len(text) > 200:
            continue

        # Another temporary workaround: Do not show the sentences whose dedaword is in the first position
        if pos <= 1:
            continue

        mode_idx = sentence_idx % QUESTION_PER_TEST

        mode = ""
        if mode_idx < MODE_THRESHOLD.MODE_0.value:
            mode = 'MODE_0'
        elif mode_idx < MODE_THRESHOLD.MODE_1.value:
            mode = 'MODE_1'
        elif mode_idx < MODE_THRESHOLD.MODE_2.value:
            mode = 'MODE_2'
        elif mode_idx < MODE_THRESHOLD.MODE_3.value:
            mode = 'MODE_3'
        elif mode_idx < MODE_THRESHOLD.MODE_4.value:
            mode = 'MODE_4'
        elif mode_idx < MODE_THRESHOLD.MODE_5.value:
            mode = 'MODE_5'
        elif mode_idx < MODE_THRESHOLD.MODE_6.value:
            mode = 'MODE_6'
        

        sentence_info = {
            'sentence_idx': sentence_idx,
            'full_sentence': text,
            'pos': pos
        }

        print("Sentence " + str(sentence_idx) + " is inserted. " + ": Mode: " + mode + " , Pos: " + str(pos) + " , Len: " + str(len(text)))
        status = get_status(sentence_info)
        clitic = get_clitic(sentence_info)
        instance = Sentence(index=sentence_idx,
                            text=text,
                            pos=pos,
                            status=status,
                            clitic=clitic,
                            mode=mode,
                            decision_count=0,
                            )
        instance.save()

        sentence_idx += 1


def delete_game(apps, schema_editor):
    Sentence = apps.get_model("game", "Sentence")
    Sentence.objects.all().delete()


def get_clitic(sentence_info):

    full_sentence = sentence_info['full_sentence']
    pos = sentence_info['pos']

    words = full_sentence.split()

    word_deda = words[pos]

    return word_deda[-2:]

# Returns if the deda is separate or adjacent
def get_status(sentence_info):

    full_sentence = sentence_info['full_sentence']
    pos = sentence_info['pos']
    
    words = full_sentence.split()

    # if separate
    if len(words[pos]) == 2:
        return "SEPARATE"
    else:
        return "ADJACENT"

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hint_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField()),
                ('text', models.TextField()),
                ('pos', models.IntegerField()),
                ('status', models.TextField()),
                ('clitic', models.CharField(max_length=2)),
                ('decision_count', models.IntegerField(default=0)),
                ('mode', models.CharField(max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='game.Question')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='sentence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.Sentence'),
        ),
        migrations.AddField(
            model_name='question',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='game.Question')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 4, 25, 19, 14, 43, 245762, tzinfo=utc))),
                ('name', models.CharField(max_length=10)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.Question')),
            ],
        ),
        migrations.RunPython(load_game,delete_game),
    ]
